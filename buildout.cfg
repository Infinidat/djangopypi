[buildout]
prefer-final = false
newest = false
download-cache = .cache
develop = .
parts = 

[project]
name = infi.djangopypi
company = Infinidat
namespace_packages = []
install_requires = [
	'django-haystack',
	'django-registration',
	'django<1.7',
	'docutils',
	'setuptools',
	'Whoosh'
	]
version_file = src/djangopypi/__version__.py
description = Simple PyPI server written in django
long_description = Simple PyPI server written in django. Allows you to register/upload with distutils and install with easy_install/pip.
console_scripts = ['manage = app.scripts.manage:execute']
gui_scripts = []
package_data = []
upgrade_code = {5cd75b1c-367e-11e4-b7d2-7071bc32067f}
product_name = djangopypi
post_install_script_name = None
pre_uninstall_script_name = None

[isolated-python]
recipe = infi.recipe.python
version = v2.7.6.21

[setup.py]
recipe = infi.recipe.template.version
input = setup.in
output = setup.py

[__version__.py]
recipe = infi.recipe.template.version
output = ${project:version_file}

[development-scripts]
dependent-scripts = true
recipe = infi.recipe.console_scripts
eggs = ${project:name}
	ipython
	nose
	mock
	coverage
	pylint
	infi.unittest
	infi.traceback
	zc.buildout
interpreter = python

[django.wsgi]
recipe = infi.recipe.console_scripts
eggs = ${project:name}
	munch
initialization =
	import os, munch, app.scripts
	os.environ.setdefault("DJANGO_SETTINGS_MODULE", "app.settings")
	from django.core.wsgi import get_wsgi_application
	application = get_wsgi_application()
	sys = munch.Munch()
	nothing = lambda *args, **kwargs: None
	sys.exit = nothing
	app.scripts.nothing = nothing
entry-points =
	django.wsgi=app.scripts:nothing

[eclipse]
recipe = rbco.recipe.pyeclipse
project-name = ${project:name}
project-directory = ${buildout:directory}
python-version = 2.7
source-resources = ${buildout:directory}/src

[pydev]
recipe = pb.recipes.pydev
eggs = ${development-scripts:eggs}

[pack]
recipe = infi.recipe.application_packager

[sublime]
recipe = corneti.recipes.codeintel
eggs = ${development-scripts:eggs}

